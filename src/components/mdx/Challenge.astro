---
import Link from '@/components/Link.astro'
import AvatarComponent from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { CheckCircle, FileText, PenTool, Star, Tag, Users } from 'lucide-react'

interface Solver {
  avatar?: string
  href?: string
  name: string
}

interface ChallengeProps {
  title?: string
  solvers?: Solver[]
  authors?: string[]
  points?: number
  category?: string
  solves?: number
  files?: string[]
}

const {
  title,
  solvers = [],
  authors = [],
  points,
  category,
  solves,
  files = [],
} = Astro.props as ChallengeProps
---

<div class="mx-auto flex flex-col gap-y-4 rounded-xl border p-4">
  {
    title && (
      <div class="not-prose text-xl font-bold text-foreground">{title}</div>
    )
  }
  <div class="not-prose flex flex-col divide-y">
    {
      solvers.length > 0 && (
        <div class="flex items-center gap-x-4 py-2 first:pt-0 last:pb-0">
          <div class="flex flex-1 items-center gap-x-2 text-xs font-medium text-muted-foreground">
            <Users className="size-4" />
            {solvers.length > 1 ? 'Solvers' : 'Solver'}
          </div>
          <div class="flex flex-1 flex-wrap gap-y-2">
            {solvers.map((solver, index) => (
              <div class="flex items-center">
                {solver.href ? (
                  <Link
                    href={solver.href}
                    class="flex items-center gap-x-1"
                    underline
                  >
                    <AvatarComponent
                      client:load
                      src={solver.avatar || '/static/logo.webp'}
                      alt={`${solver.name}'s avatar`}
                      fallback={solver.name[0]}
                      className="size-4 rounded-full"
                    />
                    <span class="text-xs text-foreground">{solver.name}</span>
                  </Link>
                ) : (
                  <div class="flex items-center gap-x-1">
                    <AvatarComponent
                      client:load
                      src={solver.avatar || '/static/logo.webp'}
                      alt={`${solver.name}'s avatar`}
                      fallback={solver.name[0]}
                      className="size-4 rounded-full"
                    />
                    <span class="text-xs text-foreground">{solver.name}</span>
                  </div>
                )}
                {index < solvers.length - 1 && <span class="mr-1">,</span>}
              </div>
            ))}
          </div>
        </div>
      )
    }
    {
      authors.length > 0 && (
        <div class="flex items-center gap-x-4 py-2">
          <div class="flex flex-1 items-center gap-x-2 text-xs font-medium text-muted-foreground">
            <PenTool className="size-4" />
            {authors.length > 1 ? 'Authors' : 'Author'}
          </div>
          <div class="flex-1 text-xs">{authors.join(', ')}</div>
        </div>
      )
    }
    {
      category && (
        <div class="flex items-center gap-x-4 py-2">
          <div class="flex flex-1 items-center gap-x-2 text-xs font-medium text-muted-foreground">
            <Tag className="size-4" />
            Category
          </div>
          <div class="flex-1 text-xs">{category}</div>
        </div>
      )
    }
    {
      points !== undefined && (
        <div class="flex items-center gap-x-4 py-2">
          <div class="flex flex-1 items-center gap-x-2 text-xs font-medium text-muted-foreground">
            <Star className="size-4" />
            Points
          </div>
          <div class="flex-1 text-xs">{points}</div>
        </div>
      )
    }
    {
      solves !== undefined && (
        <div class="flex items-center gap-x-4 py-2">
          <div class="flex flex-1 items-center gap-x-2 text-xs font-medium text-muted-foreground">
            <CheckCircle className="size-4" />
            Solves
          </div>
          <div class="flex-1 text-xs">{solves}</div>
        </div>
      )
    }
    {
      files.length > 0 && (
        <div class="flex items-center gap-x-4 py-2">
          <div class="flex flex-1 items-center gap-x-2 text-xs font-medium text-muted-foreground">
            <FileText className="size-4" />
            Files
          </div>
          <div class="flex flex-1 flex-wrap gap-2">
            {files.map((file) => (
              <Badge
                variant="secondary"
                showHash={false}
                className="flex items-center gap-x-1"
              >
                <FileText className="size-3" />
                {file}
              </Badge>
            ))}
          </div>
        </div>
      )
    }
  </div>
  <div class="-my-4">
    <slot />
  </div>
</div>
